var e = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
 (function () { function setup(t) { t.fn._fadeIn = t.fn.fadeIn; var o = t.noop || function () { };
  var i = /MSIE/.test(navigator.userAgent);
   var n = /MSIE 6.0/.test(navigator.userAgent) && !/MSIE 8.0/.test(navigator.userAgent);
    var s = document.documentMode || 0; var l = t.isFunction(document.createElement("div").style.setExpression); t.blockUI = function (e) { install(window, e) };
     t.unblockUI = function (e) { remove(window, e) }; 
     t.growlUI = function (e, o, i, n) { var s = t('<div class="growlUI"></div>');
      e && s.append("<h1>" + e + "</h1>");
       o && s.append("<h2>" + o + "</h2>"); void 0 === i && (i = 3e3); 
       var callBlock = function (e) { e = e || {}; 
       t.blockUI({ message: s, fadeIn: "undefined" !== typeof e.fadeIn ? e.fadeIn : 700, fadeOut: "undefined" !== typeof e.fadeOut ? e.fadeOut : 1e3, timeout: "undefined" !== typeof e.timeout ? e.timeout : i, centerY: false, showOverlay: false, onUnblock: n, css: t.blockUI.defaults.growlCSS }) };
        callBlock(); var l = s.css("opacity"); s.mouseover((function () { callBlock({ fadeIn: 0, timeout: 3e4 }); var e = t(".blockMsg");
         e.stop(); e.fadeTo(300, 1) })).mouseout((function () { t(".blockMsg").fadeOut(1e3) })) }; 
         t.fn.block = function (o) { if ((this || e)[0] === window) { t.blockUI(o); return this || e } var i = t.extend({}, t.blockUI.defaults, o || {});
          this.each((function () { var o = t(this || e); i.ignoreIfBlocked && o.data("blockUI.isBlocked") || o.unblock({ fadeOut: 0 }) }));
           return this.each((function () { if ("static" == t.css(this || e, "position")) { (this || e).style.position = "relative";
            t(this || e).data("blockUI.static", true) } (this || e).style.zoom = 1; install(this || e, o) })) };
             t.fn.unblock = function (o) { if ((this || e)[0] === window) { t.unblockUI(o); 
                return this || e } return this.each((function () { remove(this || e, o) })) }; 
                t.blockUI.version = 2.7; t.blockUI.defaults = { message: "<h1>Please wait...</h1>", title: null, draggable: true, theme: false, css: { padding: 0, margin: 0, width: "30%", top: "40%", left: "35%", textAlign: "center", color: "#000", border: "3px solid #aaa", backgroundColor: "#fff", cursor: "wait" }, themedCSS: { width: "30%", top: "40%", left: "35%" }, overlayCSS: { backgroundColor: "#000", opacity: .6, cursor: "wait" }, cursorReset: "default", growlCSS: { width: "350px", top: "10px", left: "", right: "10px", border: "none", padding: "5px", opacity: .6, cursor: "default", color: "#fff", backgroundColor: "#000", "-webkit-border-radius": "10px", "-moz-border-radius": "10px", "border-radius": "10px" }, iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank", forceIframe: false, baseZ: 1e3, centerX: true, centerY: true, allowBodyStretch: true, bindEvents: true, constrainTabKey: true, fadeIn: 200, fadeOut: 400, timeout: 0, showOverlay: true, focusInput: true, focusableElements: ":input:enabled:visible", onBlock: null, onUnblock: null, onOverlayClick: null, quirksmodeOffsetHack: 4, blockMsgClass: "blockMsg", ignoreIfBlocked: false }; var a = null; var r = [];
                 function install(e, s) { var d, c; var u = e == window; var f = s && void 0 !== s.message ? s.message : void 0; s = t.extend({}, t.blockUI.defaults, s || {});
                  if (!s.ignoreIfBlocked || !t(e).data("blockUI.isBlocked")) { s.overlayCSS = t.extend({}, t.blockUI.defaults.overlayCSS, s.overlayCSS || {}); d = t.extend({}, t.blockUI.defaults.css, s.css || {}); 
                  s.onOverlayClick && (s.overlayCSS.cursor = "pointer");
                   c = t.extend({}, t.blockUI.defaults.themedCSS, s.themedCSS || {}); f = void 0 === f ? s.message : f; u && a && remove(window, { fadeOut: 0 });
                    if (f && "string" != typeof f && (f.parentNode || f.jquery)) { var b = f.jquery ? f[0] : f; var p = {}; t(e).data("blockUI.history", p);
                    p.el = b; p.parent = b.parentNode; p.display = b.style.display; p.position = b.style.position; p.parent && p.parent.removeChild(b) } t(e).data("blockUI.onUnblock", s.onUnblock); var h = s.baseZ;
                     var v, k, y, m; v = i || s.forceIframe ? t('<iframe class="blockUI" style="z-index:' + h++ + ';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="' + s.iframeSrc + '"></iframe>') : t('<div class="blockUI" style="display:none"></div>');
                      k = s.theme ? t('<div class="blockUI blockOverlay ui-widget-overlay" style="z-index:' + h++ + ';display:none"></div>') : t('<div class="blockUI blockOverlay" style="z-index:' + h++ + ';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>'); if (s.theme && u) { m = '<div class="blockUI ' + s.blockMsgClass + ' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:' + (h + 10) + ';display:none;position:fixed">'; s.title && (m += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (s.title || "&nbsp;") + "</div>"); m += '<div class="ui-widget-content ui-dialog-content"></div>'; m += "</div>" } else if (s.theme) { m = '<div class="blockUI ' + s.blockMsgClass + ' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:' + (h + 10) + ';display:none;position:absolute">'; s.title && (m += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (s.title || "&nbsp;") + "</div>");
                       m += '<div class="ui-widget-content ui-dialog-content"></div>'; m += "</div>" } else m = u ? '<div class="blockUI ' + s.blockMsgClass + ' blockPage" style="z-index:' + (h + 10) + ';display:none;position:fixed"></div>' : '<div class="blockUI ' + s.blockMsgClass + ' blockElement" style="z-index:' + (h + 10) + ';display:none;position:absolute"></div>'; y = t(m); if (f) if (s.theme) { y.css(c); y.addClass("ui-widget-content") } else y.css(d); s.theme || k.css(s.overlayCSS); k.css("position", u ? "fixed" : "absolute"); (i || s.forceIframe) && v.css("opacity", 0); var g = [v, k, y], I = t(u ? "body" : e); t.each(g, (function () { this.appendTo(I) })); s.theme && s.draggable && t.fn.draggable && y.draggable({ handle: ".ui-dialog-titlebar", cancel: "li" }); var w = l && (!t.support.boxModel || t("object,embed", u ? null : e).length > 0); if (n || w) { u && s.allowBodyStretch && t.support.boxModel && t("html,body").css("height", "100%"); if ((n || !t.support.boxModel) && !u) { var U = sz(e, "borderTopWidth"), x = sz(e, "borderLeftWidth"); 
                       var C = U ? "(0 - " + U + ")" : 0; var S = x ? "(0 - " + x + ")" : 0 } t.each(g, (function (e, t) { var o = t[0].style; o.position = "absolute"; if (e < 2) { u ? o.setExpression("height", "Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.support.boxModel?0:" + s.quirksmodeOffsetHack + ') + "px"') : o.setExpression("height", 'this.parentNode.offsetHeight + "px"'); u ? o.setExpression("width", 'jQuery.support.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"') : o.setExpression("width", 'this.parentNode.offsetWidth + "px"'); S && o.setExpression("left", S); C && o.setExpression("top", C) } else if (s.centerY) { u && o.setExpression("top", '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"');
                     o.marginTop = 0 } else if (!s.centerY && u) { var i = s.css && s.css.top ? parseInt(s.css.top, 10) : 0; var n = "((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + " + i + ') + "px"'; o.setExpression("top", n) } })) } if (f) { s.theme ? y.find(".ui-widget-content").append(f) : y.append(f); (f.jquery || f.nodeType) && t(f).show() } (i || s.forceIframe) && s.showOverlay && v.show(); if (s.fadeIn) { var O = s.onBlock ? s.onBlock : o; var E = s.showOverlay && !f ? O : o; 
                        var T = f ? O : o; s.showOverlay && k._fadeIn(s.fadeIn, E); f && y._fadeIn(s.fadeIn, T) } else { s.showOverlay && k.show(); f && y.show(); s.onBlock && s.onBlock.bind(y)() } bind(1, e, s); if (u) { a = y[0]; r = t(s.focusableElements, a); s.focusInput && setTimeout(focus, 20) } else center(y[0], s.centerX, s.centerY); if (s.timeout) { var M = setTimeout((function () { u ? t.unblockUI(s) : t(e).unblock(s) }), s.timeout); t(e).data("blockUI.timeout", M) } } } function remove(e, o) { var i; var n = e == window; var s = t(e); var l = s.data("blockUI.history"); var d = s.data("blockUI.timeout"); if (d) { clearTimeout(d); s.removeData("blockUI.timeout") } o = t.extend({}, t.blockUI.defaults, o || {}); bind(0, e, o); if (null === o.onUnblock) { o.onUnblock = s.data("blockUI.onUnblock"); s.removeData("blockUI.onUnblock") } var c; c = n ? t("body").children().filter(".blockUI").add("body > .blockUI") : s.find(">.blockUI"); if (o.cursorReset) { c.length > 1 && (c[1].style.cursor = o.cursorReset); c.length > 2 && (c[2].style.cursor = o.cursorReset) } n && (a = r = null); if (o.fadeOut) { i = c.length; c.stop().fadeOut(o.fadeOut, (function () { 0 === --i && reset(c, l, o, e) })) } else reset(c, l, o, e) } function reset(o, i, n, s) { var l = t(s);
                             if (!l.data("blockUI.isBlocked")) { o.each((function (t, o) { (this || e).parentNode && (this || e).parentNode.removeChild(this || e) })); 
                             if (i && i.el) { i.el.style.display = i.display; i.el.style.position = i.position; i.el.style.cursor = "default"; i.parent && i.parent.appendChild(i.el); l.removeData("blockUI.history") } l.data("blockUI.static") && l.css("position", "static"); "function" == typeof n.onUnblock && n.onUnblock(s, n); var a = t(document.body), r = a.width(), d = a[0].style.width; a.width(r - 1).width(r); a[0].style.width = d } } function bind(e, o, i) { var n = o == window, s = t(o); if (e || (!n || a) && (n || s.data("blockUI.isBlocked"))) { s.data("blockUI.isBlocked", e); 
                             if (n && i.bindEvents && (!e || i.showOverlay)) { var l = "mousedown mouseup keydown keypress keyup touchstart touchend touchmove"; e ? t(document).bind(l, i, handler) : t(document).unbind(l, handler) } } } function handler(e) { if ("keydown" === e.type && e.keyCode && 9 == e.keyCode && a && e.data.constrainTabKey) { var o = r; var i = !e.shiftKey && e.target === o[o.length - 1]; var n = e.shiftKey && e.target === o[0]; if (i || n) { setTimeout((function () { focus(n) }), 10); return false } } var s = e.data; var l = t(e.target); l.hasClass("blockOverlay") && s.onOverlayClick && s.onOverlayClick(e); return l.parents("div." + s.blockMsgClass).length > 0 || 0 === l.parents().children().filter("div.blockUI").length } function focus(e) { if (r) { var t = r[true === e ? r.length - 1 : 0]; t && t.focus() } } function center(e, t, o) { var i = e.parentNode, n = e.style; var s = (i.offsetWidth - e.offsetWidth) / 2 - sz(i, "borderLeftWidth");
                      var l = (i.offsetHeight - e.offsetHeight) / 2 - sz(i, "borderTopWidth");
                       t && (n.left = s > 0 ? s + "px" : "0"); o && (n.top = l > 0 ? l + "px" : "0") } function sz(e, o) { return parseInt(t.css(e, o), 10) || 0 } } 
setup(jQuery) })(); var t = {};
 export default t;


